name: Python CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.12']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,viz]"
    
    # - name: Lint with ruff
    #   uses: chartboost/ruff-action@v1
    #   with:
    #     version: latest
    #     args: --select E,F,I,N,W,C90
    
    # - name: Check formatting with black
    #   uses: psf/black@stable
    #   with:
    #     options: "--check --verbose"
    #     src: "./cohortbalancer3"
    #     version: "23.0.0"
      
    # - name: Run type checking with mypy
    #   run: |
    #     mypy cohortbalancer3
    #   continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest
    
    - name: Generate coverage report
      run: |
        pytest --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # docs:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10'
    
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -e ".[docs,viz]"
    
  #   - name: Build documentation
  #     run: |
  #       cd docs
  #       make html
  #     continue-on-error: true

  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10'
    
  #   - name: Install build dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install build wheel twine
    
  #   - name: Build package
  #     run: |
  #       python -m build
    
  #   - name: Check package with twine
  #     run: |
  #       python -m twine check dist/* 